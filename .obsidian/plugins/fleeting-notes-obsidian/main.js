/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => FleetingNotesPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  fleeting_notes_folder: "/",
  note_template: '---\n# Metadata used for sync\nid: "${id}"\ntitle: "${title}"\ncreated: "${datetime}"\nsource: "${source}"\n---\n${content}',
  sync_on_startup: false,
  last_sync_time: new Date(0),
  sync_type: "one-way",
  username: "",
  password: ""
};
var FleetingNotesPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "sync-fleeting-notes",
        name: "Sync Notes with Fleeting Notes",
        callback: () => __async(this, null, function* () {
          this.syncFleetingNotes();
        })
      });
      this.addSettingTab(new FleetingNotesSettingTab(this.app, this));
      if (this.settings.sync_on_startup) {
        this.app.workspace.onLayoutReady(() => {
          this.syncFleetingNotes();
        });
      }
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  syncFleetingNotes() {
    return __async(this, null, function* () {
      try {
        if (this.settings.sync_type === "two-way") {
          yield this.pushFleetingNotes();
        }
        let notes = yield getAllNotesFirebase(this.settings.username, this.settings.password);
        notes = notes.filter((note) => !note._isDeleted);
        yield this.writeNotes(notes, this.settings.fleeting_notes_folder);
        this.settings.last_sync_time = new Date();
        new import_obsidian.Notice("Fleeting Notes sync success!");
      } catch (e) {
        if (typeof e === "string") {
          new import_obsidian.Notice(e);
        } else {
          new import_obsidian.Notice("Fleeing Notes sync failed - please check settings");
          console.error(e);
        }
      }
    });
  }
  parseNoteFile(file) {
    return __async(this, null, function* () {
      var rawNoteContent = yield this.app.vault.read(file);
      var frontmatter = {};
      var content = rawNoteContent;
      var m = rawNoteContent.match(/^---\n([\s\S]*?)\n---\n/m);
      if (m) {
        try {
          frontmatter = (0, import_obsidian.parseYaml)(m[1]);
          content = content.replace(m[0], "");
        } catch (e) {
          console.error("Failed to parse frontmatter for " + file.path);
          console.error(e);
        }
      }
      return { frontmatter, content };
    });
  }
  pushFleetingNotes() {
    return __async(this, null, function* () {
      var modifiedNotes = yield this.getUpdatedLocalNotes(this.settings.fleeting_notes_folder);
      var formattedNotes = yield Promise.all(modifiedNotes.map((file) => __async(this, null, function* () {
        var { frontmatter, content } = yield this.parseNoteFile(file);
        return {
          "_id": frontmatter.id,
          "title": frontmatter.title ? file.basename : "",
          "content": content || "",
          "source": frontmatter.source || ""
        };
      })));
      if (formattedNotes.length > 0) {
        yield updateNotesFirebase(this.settings.username, this.settings.password, formattedNotes);
        this.settings.last_sync_time = new Date();
      }
    });
  }
  getExistingFleetingNotes(dir) {
    return __async(this, null, function* () {
      let noteMap = new Map();
      try {
        var files = this.app.vault.getFiles();
        for (var i = 0; i < files.length; i++) {
          var file = files[i];
          var file_id;
          var { frontmatter } = yield this.parseNoteFile(file);
          file_id = frontmatter.id || null;
          var fileInDir = dir === "/" ? !file.path.contains("/") : file.path.startsWith(dir);
          if (!fileInDir || file_id == null) {
            continue;
          }
          noteMap.set(file_id, file);
        }
      } catch (e) {
        console.error("Failed to Retrieve All Existing Fleeting Notes");
        console.error(e);
      }
      return noteMap;
    });
  }
  convertObsidianPath(path) {
    path = path[0] === "/" ? path.replace("/", "") : path;
    path = path || "/";
    return path;
  }
  getFilledTemplate(template, note) {
    var newTemplate = template.replace(/\$\{id\}/gm, note._id).replace(/\$\{title\}/gm, note.title).replace(/\$\{datetime\}/gm, note.timestamp.substring(0.1)).replace(/\$\{content\}/gm, note.content).replace(/\$\{source\}/gm, note.source);
    return newTemplate;
  }
  getUpdatedLocalNotes(folder) {
    return __async(this, null, function* () {
      folder = this.convertObsidianPath(folder);
      var existingNotes = Array.from((yield this.getExistingFleetingNotes(folder)).values());
      var frontmatters = yield Promise.all(existingNotes.map((note) => __async(this, null, function* () {
        return (yield this.parseNoteFile(note)).frontmatter;
      })));
      var modifiedNotes = existingNotes.filter((note, i) => {
        const isContentModified = new Date(note.stat.mtime) > this.settings.last_sync_time;
        const isTitleChanged = frontmatters[i].title && frontmatters[i].title !== note.basename;
        return isContentModified || isTitleChanged;
      });
      return modifiedNotes;
    });
  }
  writeNotes(notes, folder) {
    return __async(this, null, function* () {
      folder = this.convertObsidianPath(folder);
      try {
        var existingNotes = yield this.getExistingFleetingNotes(folder);
        var folderExists = yield this.app.vault.adapter.exists(folder);
        if (!folderExists) {
          yield this.app.vault.createFolder(folder);
        }
        for (var i = 0; i < notes.length; i++) {
          var note = notes[i];
          var title = note.title ? `${note.title}.md` : `${note._id}.md`;
          var path = this.convertObsidianPath(pathJoin([folder, title]));
          var mdContent = this.getFilledTemplate(this.settings.note_template, note);
          var file = existingNotes.get(note._id) || null;
          if (file != null) {
            yield this.app.vault.modify(file, mdContent);
            yield this.app.vault.rename(file, path);
          } else {
            var delFile = this.app.vault.getAbstractFileByPath(path);
            if (delFile != null) {
              yield this.app.vault.delete(delFile);
            }
            yield this.app.vault.create(path, mdContent);
          }
        }
      } catch (e) {
        console.error(e);
        throw "Failed to write notes to Obsidian - Check `folder location` is not empty in settings";
      }
    });
  }
};
var FleetingNotesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Authentication" });
    new import_obsidian.Setting(containerEl).setName("Email").setDesc("Email used to log into Fleeting Notes").addText((text) => text.setPlaceholder("Enter email").setValue(this.plugin.settings.username).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.username = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Password").addText((text) => {
      text.setPlaceholder("Enter password").setValue(this.plugin.settings.password).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.password = value;
        yield this.plugin.saveSettings();
      }));
      text.inputEl.type = "password";
    });
    containerEl.createEl("h2", { text: "Sync Settings" });
    new import_obsidian.Setting(containerEl).setName("Fleeting Notes folder location").setDesc("Files will be populated here from Fleeting Notes").addText((text) => text.setPlaceholder("Enter the folder location").setValue(this.plugin.settings.fleeting_notes_folder).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.fleeting_notes_folder = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Sync notes on startup").addToggle((tog) => tog.setValue(this.plugin.settings.sync_on_startup).onChange((val) => __async(this, null, function* () {
      this.plugin.settings.sync_on_startup = val;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Sync type:").addDropdown((dropdown) => dropdown.addOption("one-way", "One-way sync (FN \u21D2 Obsidian)").addOption("two-way", "Two-way sync (FN \u21D4 Obsidian)").setValue(this.plugin.settings.sync_type).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.sync_type = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("hr");
    new import_obsidian.Setting(containerEl).setHeading().setName("Note Template");
    new import_obsidian.Setting(containerEl).setHeading().addTextArea((t) => {
      t.setValue(this.plugin.settings.note_template).onChange((val) => __async(this, null, function* () {
        this.plugin.settings.note_template = val;
        yield this.plugin.saveSettings();
      }));
      t.inputEl.setAttr("rows", 10);
      t.inputEl.addClass("note_template");
    }).addExtraButton((cb) => {
      cb.setIcon("sync").setTooltip("Refresh template").onClick(() => {
        this.plugin.settings.note_template = DEFAULT_SETTINGS.note_template;
        this.plugin.saveSettings();
        this.display();
      });
    });
  }
};
function pathJoin(parts, sep = "/") {
  var separator = sep || "/";
  var replace = new RegExp(separator + "{1,}", "g");
  return parts.join(separator).replace(replace, separator);
}
var firebaseUrl = "https://us-central1-fleetingnotes-22f77.cloudfunctions.net";
var getAllNotesFirebase = (email, password) => __async(void 0, null, function* () {
  let notes = [];
  try {
    const base64Auth = btoa(`${email}:${password}`);
    const config = {
      method: "post",
      url: `${firebaseUrl}/get_all_notes`,
      contentType: "application/json",
      headers: {
        "Authorization": `Basic ${base64Auth}`
      }
    };
    const res = yield (0, import_obsidian.request)(config);
    notes = JSON.parse(res);
  } catch (e) {
    console.error(e);
    throw "Failed to retrieve notes from the database - Check credentials in settings & internet connection";
  }
  return notes;
});
var updateNotesFirebase = (email, password, notes) => __async(void 0, null, function* () {
  try {
    const base64Auth = btoa(`${email}:${password}`);
    const config = {
      method: "post",
      url: `${firebaseUrl}/update_notes`,
      contentType: "application/json",
      headers: {
        "Authorization": `Basic ${base64Auth}`,
        "notes": JSON.stringify(notes)
      }
    };
    yield (0, import_obsidian.request)(config);
  } catch (e) {
    console.error(e);
    throw "Failed to update notes in the database - Check credentials in settings & internet connection";
  }
});
